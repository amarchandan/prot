
let loadStart = new Date().getTime();
let loadEnd;
let activityTimeout;
let lastActive = Date.now();
let ipDataCache = null;
let ua = UAParser(navigator.userAgent);

function activityCheck() {
  if (window.self === window.top) {
    clearTimeout(activityTimeout);
    lastActive = Date.now();

    activityTimeout = setTimeout(() => {
      slickInsertAnalytics({
        type: "endsession",
        session_duration: (Date.now() - lastActive) / 1000
      });
    }, 300000);
  }
}

async function getIPData() {
  if (ipDataCache) return ipDataCache;

  try {
    let res = await fetch("https://api64.ipify.org?format=json");
    let json = await res.json();
    let ip = json.ip;

    if (ip !== "::1" && ip !== "127.0.0.1" && ip !== "localhost") {
      let locationRes = await fetch(`https://ipapi.co/${ip}/json/`);
      let locationJson = await locationRes.json();

      if (locationJson.city) {
        ipDataCache = {
          ip,
          city: locationJson.city,
          region: locationJson.region,
          region_code: locationJson.region_code,
          country: locationJson.country_name,
          country_code: locationJson.country_code_iso3,
          latitude: locationJson.latitude,
          longitude: locationJson.longitude
        };
      } else {
        console.warn("IP API Error - No City Found");
        ipDataCache = { ip };
      }
    } else {
      ipDataCache = { ip };
    }
  } catch (e) {
    console.warn("IP Fetch Failed", e);
    ipDataCache = {};
  }

  return ipDataCache;
}

async function slickInsertAnalytics(data) {
  if (window.self === window.top) {
    data.domain = window.location.hostname.replace("www.", "");
    data.url = window.location.pathname + window.location.search + window.location.hash;
    data.referrer = document.referrer;
    data.user_language = navigator.language;
    data.user_agent = navigator.userAgent;
    data.os = ua.os.name;
    data.browser = ua.browser.name;
    data.browser_version = ua.browser.version;
    data.device_type = ua.device.type || "desktop";
    data.device_vendor = ua.device.vendor || null;
    data.device_model = ua.device.model || null;

    let ipInfo = await getIPData();
    if (ipInfo) data = { ...data, ...ipInfo };

    try {
      await fetch("https://your-backend-or-analytics-service.com/collect", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });
    } catch (e) {
      console.warn("Analytics Send Failed", e);
    }
  }
}

function slickEvent(options) {
  if (window.self === window.top) {
    slickInsertAnalytics({ type: "event", ...options });
  }
}

function slickError(options) {
  if (window.self === window.top) {
    slickInsertAnalytics({ type: "error", ...options });
  }
}

window.addEventListener(
  "error",
  (e) => {
    if (window.self === window.top) {
      console.log("error: ", e);
      slickError({ message: e.message, file: e.filename, line: e.lineno });
    }
  },
  true
);

window.addEventListener("load", () => {
  if (window.self === window.top) {
    loadEnd = new Date().getTime();
    slickInsertAnalytics({
      type: "pageview",
      page_load: (loadEnd - loadStart) / 1000,
      duration: 0
    });
    activityCheck();
  }
});

window.addEventListener("mousemove", activityCheck);
window.addEventListener("touchend", activityCheck);
window.addEventListener("keyup", activityCheck);
window.addEventListener("scroll", activityCheck);
</script>
