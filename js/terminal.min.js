
var Terminal = function (options) {
  var self = this;
  this.typingSpeed = options.typingSpeed || 100;
  this.lineCount = 0;
  this.pause = options.pause || 1000;
  this.caretSymbol = options.caretSymbol || ">";

  if (!options.container || !options.commands) {
    console.warn("Terminal: Missing required container");
  }
  for (var key in options) this[key] = options[key];


  if (!document.querySelector("#terminal-styles")) {
    var s = document.createElement("style");
    s.id = "terminal-styles";
    s.innerHTML = `
    .slick-terminal {
      background:#000;
      height:300px;
      width:400px;
      padding:15px;
      font-family:'Arial';
      font-size:14px;
      overflow:auto;
    }
    .slick-terminal-line {
      position:relative;
      margin-bottom:2px;
      display:flex;
      align-items:center;
    }
    .slick-terminal-caret { color:#fff;margin-right:8px; }
    .slick-terminal-cursor {
      display:inline-block;
      width:8px;
      height:16px;
      background:#fff;
      opacity:1;
      will-change:opacity;
      animation:blink 1s infinite;
    }
    .slick-terminal-text { color:#fff; white-space:pre-wrap; }
    @keyframes blink {
      0%, 60% {opacity:1}
      80%, 100% {opacity:0}
    }`;
    document.head.appendChild(s);
  }

  this.newLine = function () {
    var command = self.commands[self.lineCount];
    if (!command) return;

    var tl = document.createElement("div");
    tl.classList.add("slick-terminal-line");
    tl.innerHTML = `<span class="slick-terminal-caret">${self.caretSymbol}</span>
                    <span class="slick-terminal-text"></span>`;
    self.container.appendChild(tl);

    if (self.lineBegin) self.lineBegin();
    var terminalText = tl.querySelector(".slick-terminal-text");

    var cursor = document.createElement("span");
    cursor.classList = "slick-terminal-cursor";
    tl.appendChild(cursor);

    function nextLine() {
      self.lineCount++;
      if (cursor) cursor.remove();

      if (self.commands[self.lineCount]) {
        self.newLine();
      } else if (self.loop) {
        self.lineCount = 0;
        self.newLine();
      } else if (self.done) {
        self.done();
      }
    }

    setTimeout(() => {
      if (command.typing) {
        let text = command.text;
        let i = 0;

        function typeChar() {
          terminalText.textContent += text[i];
          i++;
          if (i < text.length) {
            setTimeout(() => requestAnimationFrame(typeChar), self.typingSpeed);
          } else {
            nextLine();
          }
        }

        requestAnimationFrame(typeChar);
      } else {
        terminalText.textContent = command.text;
        nextLine();
      }
    }, self.pause);
  };

  self.newLine();
};
